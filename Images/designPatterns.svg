<svg id="kity_svg_6" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1893" height="647" style="background: rgb(251, 251, 251); visibility: visible;" viewBox="0 0 1893 647"><defs id="kity_defs_7"><linearGradient id="kity_linearGradient_17" x1="0" y1="0" x2="0" y2="1"><stop id="kity_stop_18" offset="0" stop-color="rgb(255, 255, 255)"></stop><stop id="kity_stop_19" offset="1" stop-color="rgb(204, 204, 204)"></stop></linearGradient><marker id="kity_marker_2" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_3" fill="rgb(123, 115, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker></defs><g id="kity_g_8"><g id="minder1" text-rendering="optimize-speed"><g id="minder_connect_group1"><path id="kity_path_31" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1007,296.5A174.5,161,0,0,1,1181.5,135.5"></path><path id="kity_path_33" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,135.5C1310.5,135.5,1310.5,45.5,1325.5,45.5L1668.5,45.5"></path><path id="kity_path_35" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,135.5C1310.5,135.5,1310.5,97.5,1325.5,97.5L1836.5,97.5"></path><path id="kity_path_37" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1007,296.5A174.5,161,0,0,0,1181.5,457.5"></path><path id="kity_path_39" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1007,296.5A174.5,0,0,0,1,832.5,296.5"></path><path id="kity_path_71" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,135.5C1310.5,135.5,1310.5,149.5,1325.5,149.5L1873.5,149.5"></path><path id="kity_path_79" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,135.5C1310.5,135.5,1310.5,201.5,1325.5,201.5L1693.5,201.5"></path><path id="kity_path_87" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,135.5C1310.5,135.5,1310.5,253.5,1325.5,253.5L1608.5,253.5"></path><path id="kity_path_103" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,457.5C1310.5,457.5,1310.5,315.5,1325.5,315.5L1668.5,315.5"></path><path id="kity_path_111" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,457.5C1310.5,457.5,1310.5,367.5,1325.5,367.5L1729.5,367.5"></path><path id="kity_path_119" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,457.5C1310.5,457.5,1310.5,419.5,1325.5,419.5L1708.5,419.5"></path><path id="kity_path_127" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,457.5C1310.5,457.5,1310.5,471.5,1325.5,471.5L1572.5,471.5"></path><path id="kity_path_135" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,457.5C1310.5,457.5,1310.5,523.5,1325.5,523.5L1704.5,523.5"></path><path id="kity_path_143" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,457.5C1310.5,457.5,1310.5,575.5,1325.5,575.5L1669.5,575.5"></path><path id="kity_path_151" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M1295.5,457.5C1310.5,457.5,1310.5,627.5,1325.5,627.5L1692.5,627.5"></path><path id="kity_path_183" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,50.5,688.5,50.5L226.5,50.5"></path><path id="kity_path_191" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,102.5,688.5,102.5L332.5,102.5"></path><path id="kity_path_199" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,154.5,688.5,154.5L272.5,154.5"></path><path id="kity_path_207" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,206.5,688.5,206.5L297.5,206.5"></path><path id="kity_path_215" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,258.5,688.5,258.5L153.5,258.5"></path><path id="kity_path_223" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,310.5,688.5,310.5L332.5,310.5"></path><path id="kity_path_231" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,362.5,688.5,362.5L370.5,362.5"></path><path id="kity_path_239" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,414.5,688.5,414.5L201.5,414.5"></path><path id="kity_path_247" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,466.5,688.5,466.5L20.5,466.5"></path><path id="kity_path_255" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,518.5,688.5,518.5L260.5,518.5"></path><path id="kity_path_263" fill="none" stroke="rgb(123, 115, 191)" stroke-width="1" d="M718.5,296.5C703.5,296.5,703.5,570.5,688.5,570.5L212.5,570.5"></path></g><g id="minder_node1"><path id="node_outline1" fill="rgb(123, 115, 191)" stroke="rgb(123, 115, 191)" d="M955.5,276.5h103a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-103a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text1" fill="white"><text id="kity_text_22" text-rendering="inherit" font-size="16" dy=".8em" y="286.09999990463257" x="974.5">设计模式</text></g></g><g id="kity_g_12"><path id="kity_path_13" fill="none" stroke="none" d="M974.5,296.5h0v0h0z"></path></g><g id="kity_g_14"><path id="kity_path_15" fill="none" stroke="none" d="M974.5,296.5h0v0h0z"></path><path id="kity_path_16" fill="none" stroke="none"></path></g><g id="minder_node2"><g id="node_expander3" style="cursor: pointer;"><path id="kity_path_62" fill="white" stroke="gray" d="M1182.5,135.5A6,6,0,1,1,1170.5,135.5A6,6,0,1,1,1182.5,135.5"></path><path id="kity_path_63" fill="none" stroke="gray" d="M1172,135.5L1181,135.5"></path></g><path id="node_outline4" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M1186.5,122.5h106a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-106a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text4" fill="black"><text id="kity_text_45" text-rendering="inherit" font-size="14" dy=".8em" y="126.40000009536743" x="1203.5">创建型模式</text></g></g><g id="minder_node3"><g id="node_expander1" style="cursor: pointer;" display="none"><path id="kity_path_56" fill="white" stroke="gray" d="M1335.5,31.5A6,6,0,1,1,1323.5,31.5A6,6,0,1,1,1335.5,31.5"></path><path id="kity_path_57" fill="none" stroke="gray"></path></g><path id="node_outline2" fill="none" stroke="none" d="M1340.5,20.5h323a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-323a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text2" fill="black"><text id="kity_text_41" text-rendering="inherit" font-size="12" dy=".8em" y="23.700000047683716" x="1345.5">单例模式：某个类只能有一个实例，提供一个全局访问接口</text></g></g><g id="minder_node4"><g id="node_expander2" style="cursor: pointer;" display="none"><path id="kity_path_59" fill="white" stroke="gray" d="M1335.5,83.5A6,6,0,1,1,1323.5,83.5A6,6,0,1,1,1335.5,83.5"></path><path id="kity_path_60" fill="none" stroke="gray"></path></g><path id="node_outline3" fill="none" stroke="none" d="M1340.5,72.5h491a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-491a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text3" fill="black"><text id="kity_text_43" text-rendering="inherit" font-size="12" dy=".8em" y="75.70000004768372" x="1345.5">工厂方法模式：定义一个创建对象的接口，以及一系列实例化类，让子类决定实例化哪个类</text></g></g><g id="minder_node5"><g id="node_expander4" style="cursor: pointer;"><path id="kity_path_65" fill="white" stroke="gray" d="M1182.5,457.5A6,6,0,1,1,1170.5,457.5A6,6,0,1,1,1182.5,457.5"></path><path id="kity_path_66" fill="none" stroke="gray" d="M1172,457.5L1181,457.5"></path></g><path id="node_outline5" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M1186.5,444.5h106a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-106a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text5" fill="black"><text id="kity_text_47" text-rendering="inherit" font-size="14" dy=".8em" y="448.40000009536743" x="1203.5">结构型模式</text></g></g><g id="minder_node6"><g id="node_expander5" style="cursor: pointer;"><path id="kity_path_68" fill="white" stroke="gray" d="M843.5,296.5A6,6,0,1,1,831.5,296.5A6,6,0,1,1,843.5,296.5"></path><path id="kity_path_69" fill="none" stroke="gray" d="M833,296.5L842,296.5"></path></g><path id="node_outline6" fill="rgb(239, 238, 246)" stroke="rgb(123, 115, 191)" d="M721.5,283.5h106a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-106a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text6" fill="black"><text id="kity_text_49" text-rendering="inherit" font-size="14" dy=".8em" y="287.40000009536743" x="738.5">行为型模式</text></g></g><g id="minder_node7"><g id="node_expander6" style="cursor: pointer;" display="none"><path id="kity_path_76" fill="white" stroke="gray" d="M1335.5,135.5A6,6,0,1,1,1323.5,135.5A6,6,0,1,1,1335.5,135.5"></path><path id="kity_path_77" fill="none" stroke="gray"></path></g><path id="node_outline7" fill="none" stroke="none" d="M1340.5,124.5h528a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-528a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text7" fill="black"><text id="kity_text_73" text-rendering="inherit" font-size="12" dy=".8em" y="127.70000004768372" x="1345.5">抽象工厂模式：提供了一个创建一系列相关或者互相依赖的对象的接口，而无需指定它们具体的类</text></g></g><g id="minder_node8"><g id="node_expander7" style="cursor: pointer;" display="none"><path id="kity_path_84" fill="white" stroke="gray" d="M1335.5,187.5A6,6,0,1,1,1323.5,187.5A6,6,0,1,1,1335.5,187.5"></path><path id="kity_path_85" fill="none" stroke="gray"></path></g><path id="node_outline8" fill="none" stroke="none" d="M1340.5,176.5h348a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-348a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text8" fill="black"><text id="kity_text_81" text-rendering="inherit" font-size="12" dy=".8em" y="179.70000004768372" x="1345.5">建造者模式：封装一个复杂的对象构建过程，并可以按步骤构造</text></g></g><g id="minder_node9"><g id="node_expander8" style="cursor: pointer;" display="none"><path id="kity_path_92" fill="white" stroke="gray" d="M1335.5,239.5A6,6,0,1,1,1323.5,239.5A6,6,0,1,1,1335.5,239.5"></path><path id="kity_path_93" fill="none" stroke="gray"></path></g><path id="node_outline9" fill="none" stroke="none" d="M1340.5,228.5h263a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-263a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text9" fill="black"><text id="kity_text_89" text-rendering="inherit" font-size="12" dy=".8em" y="231.70000004768372" x="1345.5">原型模式：通过复制现有的实例来创建新的实例</text></g></g><g id="minder_node11"><g id="node_expander10" style="cursor: pointer;" display="none"><path id="kity_path_108" fill="white" stroke="gray" d="M1335.5,301.5A6,6,0,1,1,1323.5,301.5A6,6,0,1,1,1335.5,301.5"></path><path id="kity_path_109" fill="none" stroke="gray"></path></g><path id="node_outline11" fill="none" stroke="none" d="M1340.5,290.5h323a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-323a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text11" fill="black"><text id="kity_text_105" text-rendering="inherit" font-size="12" dy=".8em" y="293.7000000476837" x="1345.5">适配器模式：将一个类的方法接口转换成期望的另一个接口</text></g></g><g id="minder_node12"><g id="node_expander11" style="cursor: pointer;" display="none"><path id="kity_path_116" fill="white" stroke="gray" d="M1335.5,353.5A6,6,0,1,1,1323.5,353.5A6,6,0,1,1,1335.5,353.5"></path><path id="kity_path_117" fill="none" stroke="gray"></path></g><path id="node_outline12" fill="none" stroke="none" d="M1340.5,342.5h384a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-384a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text12" fill="black"><text id="kity_text_113" text-rendering="inherit" font-size="12" dy=".8em" y="345.7000000476837" x="1345.5">桥接模式：将抽象部分和它的实现部分分离，使他们都可以独立的变化</text></g></g><g id="minder_node13"><g id="node_expander12" style="cursor: pointer;" display="none"><path id="kity_path_124" fill="white" stroke="gray" d="M1335.5,405.5A6,6,0,1,1,1323.5,405.5A6,6,0,1,1,1335.5,405.5"></path><path id="kity_path_125" fill="none" stroke="gray"></path></g><path id="node_outline13" fill="none" stroke="none" d="M1340.5,394.5h363a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-363a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text13" fill="black"><text id="kity_text_121" text-rendering="inherit" font-size="12" dy=".8em" y="397.7000000476837" x="1345.5">组合模式：将对象组合成树形结构以表示“部分-整体”的层次结构</text></g></g><g id="minder_node14"><g id="node_expander13" style="cursor: pointer;" display="none"><path id="kity_path_132" fill="white" stroke="gray" d="M1335.5,457.5A6,6,0,1,1,1323.5,457.5A6,6,0,1,1,1335.5,457.5"></path><path id="kity_path_133" fill="none" stroke="gray"></path></g><path id="node_outline14" fill="none" stroke="none" d="M1340.5,446.5h227a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-227a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text14" fill="black"><text id="kity_text_129" text-rendering="inherit" font-size="12" dy=".8em" y="449.7000000476837" x="1345.5">装饰器模式：动态的给对象添加新的功能</text></g></g><g id="minder_node15"><g id="node_expander14" style="cursor: pointer;" display="none"><path id="kity_path_140" fill="white" stroke="gray" d="M1335.5,509.5A6,6,0,1,1,1323.5,509.5A6,6,0,1,1,1335.5,509.5"></path><path id="kity_path_141" fill="none" stroke="gray"></path></g><path id="node_outline15" fill="none" stroke="none" d="M1340.5,498.5h359a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-359a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text15" fill="black"><text id="kity_text_137" text-rendering="inherit" font-size="12" dy=".8em" y="501.7000000476837" x="1345.5">外观模式：对外提供一个统一的方法，来访问子系统中的一群接口</text></g></g><g id="minder_node16"><g id="node_expander15" style="cursor: pointer;" display="none"><path id="kity_path_148" fill="white" stroke="gray" d="M1335.5,561.5A6,6,0,1,1,1323.5,561.5A6,6,0,1,1,1335.5,561.5"></path><path id="kity_path_149" fill="none" stroke="gray"></path></g><path id="node_outline16" fill="none" stroke="none" d="M1340.5,550.5h324a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-324a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text16" fill="black"><text id="kity_text_145" text-rendering="inherit" font-size="12" dy=".8em" y="553.7000000476837" x="1345.5">享元模式：通过共享技术来提供有效的支持大量细粒度对象</text></g></g><g id="minder_node17"><g id="node_expander16" style="cursor: pointer;" display="none"><path id="kity_path_156" fill="white" stroke="gray" d="M1335.5,613.5A6,6,0,1,1,1323.5,613.5A6,6,0,1,1,1335.5,613.5"></path><path id="kity_path_157" fill="none" stroke="gray"></path></g><path id="node_outline17" fill="none" stroke="none" d="M1340.5,602.5h347a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-347a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text17" fill="black"><text id="kity_text_153" text-rendering="inherit" font-size="12" dy=".8em" y="605.7000000476837" x="1345.5">代理模式：为其他对象提供一个代理以便于控制这个对象的访问</text></g></g><g id="minder_node21"><g id="node_expander20" style="cursor: pointer;" display="none"><path id="kity_path_188" fill="white" stroke="gray" d="M690.5,36.5A6,6,0,1,1,678.5,36.5A6,6,0,1,1,690.5,36.5"></path><path id="kity_path_189" fill="none" stroke="gray"></path></g><path id="node_outline21" fill="none" stroke="none" d="M231.5,25.5h442a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-442a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text21" fill="black"><text id="kity_text_185" text-rendering="inherit" font-size="12" dy=".8em" y="28.700000047683716" x="236.5">访问者模式：在不改变数据结构的前提下，增加一个作用于一组对象元素的新功能</text></g></g><g id="minder_node22"><g id="node_expander21" style="cursor: pointer;" display="none"><path id="kity_path_196" fill="white" stroke="gray" d="M690.5,88.5A6,6,0,1,1,678.5,88.5A6,6,0,1,1,690.5,88.5"></path><path id="kity_path_197" fill="none" stroke="gray"></path></g><path id="node_outline22" fill="none" stroke="none" d="M337.5,77.5h336a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-336a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text22" fill="black"><text id="kity_text_193" text-rendering="inherit" font-size="12" dy=".8em" y="80.70000004768372" x="342.5">模板模式：定义一个算法结构，而将一些步骤延迟到子类实现</text></g></g><g id="minder_node23"><g id="node_expander22" style="cursor: pointer;" display="none"><path id="kity_path_204" fill="white" stroke="gray" d="M690.5,140.5A6,6,0,1,1,678.5,140.5A6,6,0,1,1,690.5,140.5"></path><path id="kity_path_205" fill="none" stroke="gray"></path></g><path id="node_outline23" fill="none" stroke="none" d="M277.5,129.5h396a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-396a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text23" fill="black"><text id="kity_text_201" text-rendering="inherit" font-size="12" dy=".8em" y="132.70000004768372" x="282.5">策略模式：定义一系列算法，将他们封装起来，并且使他们可以相互替换</text></g></g><g id="minder_node24"><g id="node_expander23" style="cursor: pointer;" display="none"><path id="kity_path_212" fill="white" stroke="gray" d="M690.5,192.5A6,6,0,1,1,678.5,192.5A6,6,0,1,1,690.5,192.5"></path><path id="kity_path_213" fill="none" stroke="gray"></path></g><path id="node_outline24" fill="none" stroke="none" d="M302.5,181.5h371a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-371a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text24" fill="black"><text id="kity_text_209" text-rendering="inherit" font-size="12" dy=".8em" y="184.70000004768372" x="307.5">状态模式：允许一个对象在其对象内部状态改变的时候改变它的行为</text></g></g><g id="minder_node25"><g id="node_expander24" style="cursor: pointer;" display="none"><path id="kity_path_220" fill="white" stroke="gray" d="M690.5,244.5A6,6,0,1,1,678.5,244.5A6,6,0,1,1,690.5,244.5"></path><path id="kity_path_221" fill="none" stroke="gray"></path></g><path id="node_outline25" fill="none" stroke="none" d="M158.5,233.5h515a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-515a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text25" fill="black"><text id="kity_text_217" text-rendering="inherit" font-size="12" dy=".8em" y="236.70000004768372" x="163.5">观察者模式：对象间一对多的依赖关系，一个对象发生改变时，所有依赖于它的对象都收到相应</text></g></g><g id="minder_node26"><g id="node_expander25" style="cursor: pointer;" display="none"><path id="kity_path_228" fill="white" stroke="gray" d="M690.5,296.5A6,6,0,1,1,678.5,296.5A6,6,0,1,1,690.5,296.5"></path><path id="kity_path_229" fill="none" stroke="gray"></path></g><path id="node_outline26" fill="none" stroke="none" d="M337.5,285.5h336a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-336a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text26" fill="black"><text id="kity_text_225" text-rendering="inherit" font-size="12" dy=".8em" y="288.7000000476837" x="342.5">备忘录模式：在不破坏封装性的前提下，保持对象的内部状态</text></g></g><g id="minder_node27"><g id="node_expander26" style="cursor: pointer;" display="none"><path id="kity_path_236" fill="white" stroke="gray" d="M690.5,348.5A6,6,0,1,1,678.5,348.5A6,6,0,1,1,690.5,348.5"></path><path id="kity_path_237" fill="none" stroke="gray"></path></g><path id="node_outline27" fill="none" stroke="none" d="M375.5,337.5h298a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-298a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text27" fill="black"><text id="kity_text_233" text-rendering="inherit" font-size="12" dy=".8em" y="340.7000000476837" x="380.5">中介者模式：用一个中介对象来封装一系列的对象交互</text></g></g><g id="minder_node28"><g id="node_expander27" style="cursor: pointer;" display="none"><path id="kity_path_244" fill="white" stroke="gray" d="M690.5,400.5A6,6,0,1,1,678.5,400.5A6,6,0,1,1,690.5,400.5"></path><path id="kity_path_245" fill="none" stroke="gray"></path></g><path id="node_outline28" fill="none" stroke="none" d="M206.5,389.5h467a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-467a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text28" fill="black"><text id="kity_text_241" text-rendering="inherit" font-size="12" dy=".8em" y="392.7000000476837" x="211.5">迭代器模式：提供一种遍历访问聚合对象中各个元素的方法，而不暴露对象的内部结构</text></g></g><g id="minder_node29"><g id="node_expander28" style="cursor: pointer;" display="none"><path id="kity_path_252" fill="white" stroke="gray" d="M690.5,452.5A6,6,0,1,1,678.5,452.5A6,6,0,1,1,690.5,452.5"></path><path id="kity_path_253" fill="none" stroke="gray"></path></g><path id="node_outline29" fill="none" stroke="none" d="M25.5,441.5h648a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-648a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text29" fill="black"><text id="kity_text_249" text-rendering="inherit" font-size="12" dy=".8em" y="444.7000000476837" x="30.5">解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</text></g></g><g id="minder_node30"><g id="node_expander29" style="cursor: pointer;" display="none"><path id="kity_path_260" fill="white" stroke="gray" d="M690.5,504.5A6,6,0,1,1,678.5,504.5A6,6,0,1,1,690.5,504.5"></path><path id="kity_path_261" fill="none" stroke="gray"></path></g><path id="node_outline30" fill="none" stroke="none" d="M265.5,493.5h408a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-408a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text30" fill="black"><text id="kity_text_257" text-rendering="inherit" font-size="12" dy=".8em" y="496.7000000476837" x="270.5">命令模式：将命令请求封装为一个对象，使得可以用不同的请求进行参数化</text></g></g><g id="minder_node31"><g id="node_expander30" style="cursor: pointer;" display="none"><path id="kity_path_268" fill="white" stroke="gray" d="M690.5,556.5A6,6,0,1,1,678.5,556.5A6,6,0,1,1,690.5,556.5"></path><path id="kity_path_269" fill="none" stroke="gray"></path></g><path id="node_outline31" fill="none" stroke="none" d="M217.5,545.5h456a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-456a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text31" fill="black"><text id="kity_text_265" text-rendering="inherit" font-size="12" dy=".8em" y="548.7000000476837" x="222.5">责任链模式：将请求的发送者和接收者解耦，使得多个对象都有处理这个请求的机会</text></g></g></g></g></svg>