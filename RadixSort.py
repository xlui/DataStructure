# 基数排序
# 从最低有效位开始排序，由低位向高位依次进行
# 算法导论上的例子：
#
# 329     720     720     329
# 457     355     329     355
# 657     436     436     436
# 839 --> 457 --> 839 --> 457
# 436     657     355     657
# 720     329     457     720
# 355     839     657     839
#  -        *      *      *
#
# 两个个人认为重要的思想：
#
# 在每次排序中，如果当前有效位相同，那么低有效位一定是有序的。
# 在每次排序中，抛开当前有效位的高有效位，数组一定是有序的。
#
import random


def radix_sort():
    A = [random.randint(1, 9999) for _ in range(10)]
    print('要排序的数组：', A)
    for k in range(4):
        s = [[] for _ in range(10)]
        for i in A:
            s[i // (10 ** k) % 10].append(i)
            # i // (10 ** k) % 10 得到的是数组中数的 低有效位，然后存进 s 数组的相应位置
            # 通过这种方式保证了 s 数组中的 10 个子数组始终按 低有效位 的先后顺序被写入
            # 虽然在之后的取出数据花费了时间，但是程序的清晰度大幅度提升
        print('s:', s)
        A = [a for b in s for a in b]
        print('A:', A)
    return A


if __name__ == '__main__':
    print(radix_sort())
